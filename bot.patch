 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/memory/player_global_states/.gitkeep b/memory/player_global_states/.gitkeep
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/memory/player_global_states/.gitkeep

diff --git a/scripts/bot_base.lua b/scripts/bot_base.lua
index ce83d8dd2d880be78b1a7b442f4efb922e13db31..dee7e60fa072b530e2957a6df15628dcc45948b7 100644
--- a/scripts/bot_base.lua
+++ b/scripts/bot_base.lua
@@ -103,75 +103,75 @@ function BotBase:process_next_action()
         end
         self.current_action_index = self.current_action_index + 1
     elseif parsed_action.command == "wait" then
         self.current_action_data.time_remaining = parsed_action.time; self.is_processing_action = true
         self.current_action_index = self.current_action_index + 1
     elseif parsed_action.command == "loop" then
         self.current_action_index = 1; self.is_processing_action = false; self.current_action_data = nil
     else
         self.current_action_index = self.current_action_index + 1; self.is_processing_action = false; self.current_action_data = nil
     end
 end
 
 --- Method to handle actor interaction for a bot instance.
 function BotBase:handle_interaction(event_player_id)
     if self.interacting_player_id ~= nil then
         if self.interacting_player_id == event_player_id then return else
             Net.message_player(event_player_id, self.config.dialogue_busy, self.bot_object.mug_texture_path, self.bot_object.mug_animation_path)
             return
         end
     end
 
     self.interacting_player_id = event_player_id
     self.action_list_paused = true
 
     Async.promisify(coroutine.create(function()
-        local all_states = Async.await(BotStateManager.load_states(event_player_id))
-        local state_table = all_states[self.config.bot_name]
-        local global_states = Async.await(GlobalStateManager.load_states())
+        local all_states = Async.await(BotStateManager.load_states(event_player_id))
+        local state_table = all_states[self.config.bot_name]
+        local global_states = Async.await(GlobalStateManager.load_player_states(event_player_id))
 
         if not state_table then
             state_table = { state = self.config.initial_state }
             all_states[self.config.bot_name] = state_table
         end
 
         self.player_states[event_player_id] = state_table
 
         local scene_key
         if type(self.config.determine_scene_key) == "function" then
             scene_key = self.config.determine_scene_key(global_states, state_table)
         else
             scene_key = state_table.state or self.config.initial_state
         end
         local scene = nil
         if self.config.SCENES then scene = self.config.SCENES[scene_key] end
 
         if scene then
             Async.await(SceneRunner.run(self, event_player_id, scene, global_states))
             all_states[self.config.bot_name] = self.player_states[event_player_id]
-            Async.await(BotStateManager.save_states(event_player_id, all_states))
-            Async.await(GlobalStateManager.save_states(global_states))
+            Async.await(BotStateManager.save_states(event_player_id, all_states))
+            Async.await(GlobalStateManager.save_player_states(event_player_id, global_states))
         end
 
         self.interacting_player_id = nil
         self.action_list_paused = false
     end))
 end
 
 --- Method to update a bot instance on tick.
 function BotBase:update_tick(dt)
     if self.action_list_paused then return end
 
     if self.is_processing_action then
         if self.bot_object.walking then
             BotMovementHelper.update_movement_on_tick(self.bot_object, dt, Net)
             if not self.bot_object.walking then self.is_processing_action = false; self.current_action_data = nil end
         elseif self.current_action_data and self.current_action_data.command == "wait" then
             self.current_action_data.time_remaining = self.current_action_data.time_remaining - dt
             if self.current_action_data.time_remaining <= 0 then self.is_processing_action = false; self.current_action_data = nil end
         end
     end
 
     if not self.is_processing_action then
         self:process_next_action()
     end
 end
diff --git a/scripts/global_state_manager.lua b/scripts/global_state_manager.lua
index 6cd08bdccd11e378027736538fd64b6530e1e828..bfa69c7eac1c91ae6f09f57645a1d6701079f354 100644
--- a/scripts/global_state_manager.lua
+++ b/scripts/global_state_manager.lua
@@ -1,44 +1,71 @@
-local GLOBAL_STATE_FILE = "memory/global_state.lua"
+local GLOBAL_STATE_FILE = "memory/global_state.lua"
+local PLAYER_STATE_FOLDER = "memory/player_global_states/"
+
+local function url_encode(str)
+  return (str:gsub("[^%w%-_.]", function(c)
+    return string.format("%%%02X", string.byte(c))
+  end))
+end
 
 local function encode_table(tbl)
   local lines = {"return {\n"}
   for k, v in pairs(tbl) do
     if type(v) == "string" then
       table.insert(lines, string.format("  [%q] = %q,\n", k, v))
     elseif type(v) == "number" or type(v) == "boolean" then
       table.insert(lines, string.format("  [%q] = %s,\n", k, tostring(v)))
     end
   end
   table.insert(lines, "}\n")
   return table.concat(lines)
 end
 
-local function decode_table(str)
+local function decode_table(str)
   local chunk = load(str)
   if not chunk then return {} end
   local ok, tbl = pcall(chunk)
   if ok and type(tbl) == "table" then
     return tbl
   end
   return {}
-end
-
-local GlobalStateManager = {}
+end
+
+local GlobalStateManager = {}
+
+function GlobalStateManager.load_player_states(player_id)
+  local identity = Net.get_player_secret(player_id)
+  local path = PLAYER_STATE_FOLDER .. url_encode(identity) .. ".lua"
+  return Async.promisify(coroutine.create(function()
+    local data = Async.await(Async.read_file(path))
+    if data and #data > 0 then
+      return decode_table(data)
+    else
+      return {}
+    end
+  end))
+end
+
+function GlobalStateManager.save_player_states(player_id, tbl)
+  local identity = Net.get_player_secret(player_id)
+  local path = PLAYER_STATE_FOLDER .. url_encode(identity) .. ".lua"
+  local content = encode_table(tbl)
+  return Async.write_file(path, content)
+end
 
 function GlobalStateManager.load_states()
   return Async.promisify(coroutine.create(function()
     local data = Async.await(Async.read_file(GLOBAL_STATE_FILE))
     if data and #data > 0 then
       return decode_table(data)
     else
       return {}
     end
   end))
 end
 
 function GlobalStateManager.save_states(tbl)
   local content = encode_table(tbl)
   return Async.write_file(GLOBAL_STATE_FILE, content)
 end
 
 return GlobalStateManager
 
EOF
)